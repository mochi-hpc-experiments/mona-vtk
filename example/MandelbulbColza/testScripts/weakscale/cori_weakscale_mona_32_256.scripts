#!/bin/bash
#SBATCH --qos=debug
#SBATCH --nodes=12
#SBATCH --tasks-per-node=32
#SBATCH --time=20:00
#SBATCH --licenses=cscratch1
#SBATCH --constraint=haswell

export BUILDDIR=/global/cscratch1/sd/zw241/build_monavtk
export SRCDIR=/global/homes/z/zw241/cworkspace/src/mona-vtk
export SCRIPTPATH=$SRCDIR/example/MandelbulbColza/pipeline/mbrender_64_iso.py

cd $BUILDDIR
# run this in the build dir of the monavtk
# maybe get the data length by env?
BLOCKNUM=1024
#server get the blocknum from env
export BLOCKNUM=1024
STEP=20
PROTOCOL=gni
SSGFILE=ssgfile
BACKEND=$BUILDDIR/example/MandelbulbColza/libmonabackend-pipeline.so
CONFIG=$SRCDIR/example/MandelbulbColza/pipeline/monaconfig.json

SWIMPERIOD=5000
rm $SSGFILE global_cred_conf

# 1 nodes for server (16*4=64=2*32)
srun -C haswell -N 4 -n 32 -c 8 --cpu_bind=cores --time=20:00 ./example/MandelbulbColza/mbserver -a $PROTOCOL -s $SSGFILE -c $CONFIG -t 1 -p $SWIMPERIOD &> mbserver_mona_32.log &

#make sure the server load the pipeline
result=0
while [ $result -ne 32 ]
do
    result=$(cat mbserver_mona_32.log | grep "Server running at" | wc -l)
    echo "$result server loaded backend"
    sleep 1  
done

# 16 nodes for client, 16*32=512, 512*8=4096 (maybe get this from the env, 2 hyperthread for one physical core)
srun -C haswell -N 8 -n 256 -c 2 --cpu_bind=cores --time=20:00 ./example/MandelbulbColza/mbclient -a $PROTOCOL -s $SSGFILE -p monabackend -b $BLOCKNUM -t $STEP > mbclient_mona_32_256.log

