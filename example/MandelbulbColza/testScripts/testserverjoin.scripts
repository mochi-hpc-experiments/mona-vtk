#!/bin/bash
#SBATCH --qos=debug
#SBATCH --nodes=2
#SBATCH --time=10:00
#SBATCH --licenses=cscratch1
#SBATCH --constraint=haswell



#srun -C haswell --time=00:10:00 -l -n 1 -c 1 --cpu_bind=cores --mem-per-cpu=1000  ./example/MandelbulbColza/mbserver -a ofi+tcp -s ssgfile -v trace &> server1.log &

#srun -C haswell --time=00:10:00 -n 1 -c 4 --cpu_bind=cores --mem-per-cpu=1000 ./example/MandelbulbColza/mbserver -a ofi+tcp -s ssgfile -c /global/homes/z/zw241/cworkspace/src/mona-vtk/example/MandelbulbColza/pipeline/config.json -v trace -t 4 &> server1.log &

export BUILDDIR=/global/cscratch1/sd/zw241/build_monavtk
export SRCDIR=/global/homes/z/zw241/cworkspace/src/mona-vtk
cd $BUILDDIR

rm -rf server*.log

srun -C haswell -N 1 -n 2 colza-dist-server -a gni -s ssgfile -t 1 -v trace -c $SRCDIR/example/MandelbulbColza/pipeline/monaconfig.json &> server_init.log &

#make sure the server load the pipeline
result=0
while [ $result -ne 2 ]
do
    result=$(cat server_init.log | grep "Server running at" | wc -l)
    echo "$result server loaded backend"
    sleep 1  
done

srun -C haswell -N 1 -n 1 colza-dist-server -a gni -s ssgfile -t 1 -v trace -c $SRCDIR/example/MandelbulbColza/pipeline/monaconfig.json -j &> server_join.log &

#srun -C haswell --time=00:10:00 -l -n 1 -c 1 --cpu_bind=cores --mem-per-cpu=1000  ./example/MandelbulbColza/mbserver -a ofi+tcp -s ssgfile -v trace -j &> server2.log

#srun -C haswell --time=00:10:00 -n 1 -c 4 --cpu_bind=cores --mem-per-cpu=1000 ./example/MandelbulbColza/mbserver -a ofi+tcp -s ssgfile -c /global/homes/z/zw241/cworkspace/src/mona-vtk/example/MandelbulbColza/pipeline/config.json -v trace -j -t 4 &> server2.log

wait